{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8fc79313",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-28T02:59:49.050221Z",
     "iopub.status.busy": "2024-05-28T02:59:49.049741Z",
     "iopub.status.idle": "2024-05-28T02:59:49.951424Z",
     "shell.execute_reply": "2024-05-28T02:59:49.950228Z"
    },
    "papermill": {
     "duration": 0.917299,
     "end_time": "2024-05-28T02:59:49.954091",
     "exception": false,
     "start_time": "2024-05-28T02:59:49.036792",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        pass\n",
    "        # print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a285f743",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T02:59:49.974748Z",
     "iopub.status.busy": "2024-05-28T02:59:49.974249Z",
     "iopub.status.idle": "2024-05-28T02:59:51.458041Z",
     "shell.execute_reply": "2024-05-28T02:59:51.457075Z"
    },
    "papermill": {
     "duration": 1.496993,
     "end_time": "2024-05-28T02:59:51.460724",
     "exception": false,
     "start_time": "2024-05-28T02:59:49.963731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Cell to define imports\n",
    "import numpy as np\n",
    "import polars as pl\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import gc\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9dd1e644",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T02:59:51.481073Z",
     "iopub.status.busy": "2024-05-28T02:59:51.480632Z",
     "iopub.status.idle": "2024-05-28T02:59:51.486256Z",
     "shell.execute_reply": "2024-05-28T02:59:51.485123Z"
    },
    "papermill": {
     "duration": 0.018576,
     "end_time": "2024-05-28T02:59:51.488768",
     "exception": false,
     "start_time": "2024-05-28T02:59:51.470192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Read all required Parquets here\n",
    "root :str = \"/kaggle/input/home-credit-credit-risk-model-stability/\"\n",
    "datapath :str = os.path.join(root, \"parquet_files/train/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "23b9965c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T02:59:51.509989Z",
     "iopub.status.busy": "2024-05-28T02:59:51.509536Z",
     "iopub.status.idle": "2024-05-28T02:59:51.638997Z",
     "shell.execute_reply": "2024-05-28T02:59:51.637644Z"
    },
    "papermill": {
     "duration": 0.142786,
     "end_time": "2024-05-28T02:59:51.641742",
     "exception": false,
     "start_time": "2024-05-28T02:59:51.498956",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "feature_definitions :pl.DataFrame = pl.read_csv(os.path.join(root, \"feature_definitions.csv\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "061c087e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T02:59:51.662057Z",
     "iopub.status.busy": "2024-05-28T02:59:51.661608Z",
     "iopub.status.idle": "2024-05-28T02:59:51.673216Z",
     "shell.execute_reply": "2024-05-28T02:59:51.672127Z"
    },
    "papermill": {
     "duration": 0.024528,
     "end_time": "2024-05-28T02:59:51.675610",
     "exception": false,
     "start_time": "2024-05-28T02:59:51.651082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "### Class for looking up the definition of a single attribute / or all the attributes present in a file (If defn exists for that attribute). \n",
    "class defnLookup:\n",
    "    def __init__(self):\n",
    "        self.feature_definitions :pl.DataFrame = pl.read_csv(os.path.join(root, \"feature_definitions.csv\"))\n",
    "    \n",
    "    # Attribute Meaning lookup in feature definition csv\n",
    "    def lookupSingle(self, feature_name, definitions = feature_definitions) -> str:\n",
    "        defn = definitions.filter(pl.col(\"Variable\") == feature_name)\n",
    "        defn = defn.select(pl.col(\"Description\").alias(\"Descr\"))\n",
    "        return defn.item()\n",
    "    \n",
    "    def lookupFile(self, file: pl.DataFrame):\n",
    "        attributes_in_train_1 = file.columns\n",
    "        availableDefn :list = self.feature_definitions[\"Variable\"].to_list()\n",
    "        #attributes_in_train_1[0]\n",
    "        for cols in attributes_in_train_1:\n",
    "            if cols in availableDefn:\n",
    "                print(\"{0} --- {1}\".format(cols, self.lookupSingle(cols, self.feature_definitions)))\n",
    "\n",
    "          \n",
    "lookup = defnLookup()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d54eaf85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T02:59:51.696610Z",
     "iopub.status.busy": "2024-05-28T02:59:51.695744Z",
     "iopub.status.idle": "2024-05-28T02:59:51.708070Z",
     "shell.execute_reply": "2024-05-28T02:59:51.706991Z"
    },
    "papermill": {
     "duration": 0.025252,
     "end_time": "2024-05-28T02:59:51.710416",
     "exception": false,
     "start_time": "2024-05-28T02:59:51.685164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def set_table_dtypes(df: pl.DataFrame) -> pl.DataFrame:\n",
    "    # implement here all desired dtypes for tables\n",
    "    # the following is just an example`\n",
    "    for col in df.columns:\n",
    "        # last letter of column name will help you determine the type\n",
    "        if col[-1] in (\"P\", \"A\"):\n",
    "            df = df.with_columns(pl.col(col).cast(pl.Float32).alias(col))\n",
    "        if col[-1] in (\"M\"):\n",
    "            if df[[col]].dtypes == pl.Int64 or df[[col]].dtypes == pl.Int32:\n",
    "                df = df.with_columns(pl.col(col).cast(pl.Int16).alias(col))\n",
    "\n",
    "    return df\n",
    "\n",
    "def filterAMP(df: pl.DataFrame) -> pl.DataFrame:\n",
    "    selected_static_cols = [\"case_id\"]\n",
    "    for col in df.columns:\n",
    "        if col[-1] in (\"A\", \"M\", \"P\"):\n",
    "            selected_static_cols.append(col)\n",
    "    df = df[selected_static_cols]\n",
    "    \n",
    "    return df\n",
    "\n",
    "def selectCategoricalColumns(df) -> pl.DataFrame:\n",
    "    selected_static_cols = [\"case_id\"]\n",
    "    for col in df.columns:\n",
    "        if col[-1] in (\"M\"):\n",
    "            selected_static_cols.append(col)\n",
    "    df = df[selected_static_cols]\n",
    "    return df\n",
    "\n",
    "def categoricalEncoding(df) -> pl.DataFrame:\n",
    "    df_temp = df.pipe(selectCategoricalColumns)\n",
    "    for x in df_temp.columns:\n",
    "        if not x == \"case_id\":\n",
    "            enc = LabelEncoder()\n",
    "            tp = enc.fit_transform(df_temp[x])\n",
    "            df_temp = df_temp.with_columns(pl.Series(name = x, values=tp))\n",
    "            le_name_mapping = dict(zip(enc.classes_, enc.transform(enc.classes_)))\n",
    "            # print(le_name_mapping.keys)\n",
    "            if \"a55475b1\" in le_name_mapping.keys():\n",
    "                df_temp = df_temp.with_columns(\n",
    "                    pl.when(\n",
    "                        pl.col(x) != le_name_mapping[\"a55475b1\"]\n",
    "                    ).then( pl.col(x) )\n",
    "                ) \n",
    "\n",
    "    for x in df_temp.columns:\n",
    "        if not x == \"case_id\":\n",
    "            df = df.with_columns(pl.Series(name=x, values=df_temp[x]))\n",
    "            \n",
    "    return df\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "73de80c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T02:59:51.731350Z",
     "iopub.status.busy": "2024-05-28T02:59:51.730975Z",
     "iopub.status.idle": "2024-05-28T03:01:07.222454Z",
     "shell.execute_reply": "2024-05-28T03:01:07.221222Z"
    },
    "papermill": {
     "duration": 75.504893,
     "end_time": "2024-05-28T03:01:07.225467",
     "exception": false,
     "start_time": "2024-05-28T02:59:51.720574",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Flow -> Select 3 or 4 files, of all depths and extract features from it for preprocessing. This can be generalized later.\n",
    "# Work with 1 file at a time\n",
    "# Currently working with train_person_1\n",
    "train_base = pl.read_parquet(os.path.join(root, datapath) + \"train_base.parquet\").pipe(set_table_dtypes)\n",
    "\n",
    "# Depth 1\n",
    "train_person_1 = pl.read_parquet(os.path.join(root, datapath) + \"train_person_1.parquet\").pipe(set_table_dtypes).pipe(filterAMP).pipe(categoricalEncoding).pipe(set_table_dtypes) \n",
    "# Depth 2\n",
    "train_person_2 = pl.read_parquet(os.path.join(root, datapath) + \"train_person_2.parquet\").pipe(set_table_dtypes).pipe(filterAMP).pipe(categoricalEncoding).pipe(set_table_dtypes)\n",
    "\n",
    "# Depth 1\n",
    "train_applprev_1 = pl.concat(\n",
    "        [\n",
    "           pl.read_parquet(os.path.join(root, datapath) + \"train_applprev_1_0.parquet\").pipe(set_table_dtypes).pipe(filterAMP),\n",
    "           pl.read_parquet(os.path.join(root, datapath) + \"train_applprev_1_1.parquet\").pipe(set_table_dtypes).pipe(filterAMP),\n",
    "        ],\n",
    "        how = \"vertical_relaxed\"\n",
    ").pipe(categoricalEncoding).pipe(set_table_dtypes)\n",
    "#Depth 2\n",
    "# train_applprev_2 = pl.read_parquet(os.path.join(root, datapath) + \"train_applprev_2.parquet\").pipe(set_table_dtypes).pipe(filterAMP).pipe(categoricalEncoding)\n",
    "\n",
    "# Depth 0\n",
    "train_static = pl.concat( \n",
    "        [\n",
    "            pl.read_parquet(os.path.join(root, datapath) + \"train_static_0_0.parquet\").pipe(set_table_dtypes),\n",
    "            pl.read_parquet(os.path.join(root, datapath) + \"train_static_0_1.parquet\").pipe(set_table_dtypes),\n",
    "        ],\n",
    "        how=\"vertical_relaxed\",\n",
    ").pipe(filterAMP).pipe(categoricalEncoding).pipe(set_table_dtypes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1f9ee3d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:01:07.246617Z",
     "iopub.status.busy": "2024-05-28T03:01:07.246247Z",
     "iopub.status.idle": "2024-05-28T03:01:08.700907Z",
     "shell.execute_reply": "2024-05-28T03:01:08.699744Z"
    },
    "papermill": {
     "duration": 1.468261,
     "end_time": "2024-05-28T03:01:08.703665",
     "exception": false,
     "start_time": "2024-05-28T03:01:07.235404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Cell for train_tax_registries, Depth 1, sum on A \n",
    "train_tax_registry_a = pl.read_parquet(os.path.join(root, datapath) + \"train_tax_registry_a_1.parquet\").pipe(set_table_dtypes)\n",
    "train_tax_registry_b = pl.read_parquet(os.path.join(root, datapath) + \"train_tax_registry_b_1.parquet\").pipe(set_table_dtypes)\n",
    "train_tax_registry_c = pl.read_parquet(os.path.join(root, datapath) + \"train_tax_registry_c_1.parquet\").pipe(set_table_dtypes)\n",
    "train_tax = train_base[[\"case_id\"]].join(\n",
    "    train_tax_registry_a.group_by(\"case_id\").agg(pl.col(\"amount_4527230A\").sum()), on=\"case_id\", how=\"left\"\n",
    ").join(\n",
    "    train_tax_registry_b.group_by(\"case_id\").agg(pl.col(\"amount_4917619A\").sum()), on=\"case_id\", how=\"left\"\n",
    ").join(\n",
    "    train_tax_registry_c.group_by(\"case_id\").agg(pl.col(\"pmtamount_36A\").sum()), on=\"case_id\", how=\"left\",\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "aafa07a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:01:08.724936Z",
     "iopub.status.busy": "2024-05-28T03:01:08.723718Z",
     "iopub.status.idle": "2024-05-28T03:03:14.823823Z",
     "shell.execute_reply": "2024-05-28T03:03:14.822485Z"
    },
    "papermill": {
     "duration": 126.11367,
     "end_time": "2024-05-28T03:03:14.826746",
     "exception": false,
     "start_time": "2024-05-28T03:01:08.713076",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_c_1 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_1_0.parquet\").pipe(set_table_dtypes).pipe(filterAMP).pipe(categoricalEncoding).pipe(set_table_dtypes)\n",
    "train_c_2 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_1_1.parquet\").pipe(set_table_dtypes).pipe(filterAMP).pipe(categoricalEncoding).pipe(set_table_dtypes)\n",
    "train_c_3 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_1_2.parquet\").pipe(set_table_dtypes).pipe(filterAMP).pipe(categoricalEncoding).pipe(set_table_dtypes)\n",
    "train_c_4 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_1_3.parquet\").pipe(set_table_dtypes).pipe(filterAMP).pipe(categoricalEncoding).pipe(set_table_dtypes)\n",
    "\n",
    "\n",
    "train_credit_bureau = pl.concat(\n",
    "    [\n",
    "        train_c_1, train_c_2, train_c_3, train_c_4\n",
    "    ],\n",
    "    how=\"vertical_relaxed\"\n",
    ").pipe(set_table_dtypes)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "22675b42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:03:14.847639Z",
     "iopub.status.busy": "2024-05-28T03:03:14.847219Z",
     "iopub.status.idle": "2024-05-28T03:03:14.859030Z",
     "shell.execute_reply": "2024-05-28T03:03:14.857797Z"
    },
    "papermill": {
     "duration": 0.025358,
     "end_time": "2024-05-28T03:03:14.861727",
     "exception": false,
     "start_time": "2024-05-28T03:03:14.836369",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Filter on num_group==0 and sum by case_id, drop null category columns\n",
    "# This Function processes depth 2 credit bureau a.\n",
    "\n",
    "def process_tcb_a_2(df : pl.DataFrame, base: pl.DataFrame) -> pl.DataFrame:\n",
    "\n",
    "    # tcb2_final = df.filter(\n",
    "    #     pl.col(\"num_group2\") == 0\n",
    "    # ).pipe(selectCategoricalColumns).pipe(categoricalEncoding)\n",
    "    \n",
    "    '''\n",
    "    catProcess = pl.concat(\n",
    "        [ catProcess, df[[\"num_group1\", \"num_group2\"]] ], how=\"horizontal\"\n",
    "    )\n",
    "    catProcess = catProcess.filter(pl.col(\"num_group2\") == 0).drop(\"num_group2\")\n",
    "    categoricalColumns = catProcess.columns\n",
    "    tcb2_final = base[[\"case_id\"]] # Final to Return\n",
    "    \n",
    "    for col in categoricalColumns:\n",
    "        \n",
    "        if not col == \"case_id\" and not col == \"num_group1\":\n",
    "            ohe = OneHotEncoder(sparse_output=False)\n",
    "            tp = ohe.fit_transform(catProcess[[col]])\n",
    "            b = pl.DataFrame(tp).drop(\"column_3\").select(\n",
    "                pl.col(\"column_0\").alias(col + \"_\" + \"0\"),\n",
    "                pl.col(\"column_1\").alias(col + \"_\" + \"1\"),\n",
    "                pl.col(\"column_2\").alias(col + \"_\" + \"2\")\n",
    "            )\n",
    "            print(ohe.categories_)\n",
    "            temp = pl.concat(\n",
    "                [b, catProcess], how=\"horizontal\"\n",
    "            ).drop(\"num_group1\").select(\n",
    "                \"case_id\", col + \"_0\", col + \"_1\", col + \"_2\"\n",
    "            ).group_by(\n",
    "                \"case_id\"\n",
    "            ).agg(\n",
    "                pl.col(\n",
    "                    col + \"_0\"\n",
    "                ).sum(),\n",
    "                pl.col(\n",
    "                    col + \"_1\"\n",
    "                ).sum(),\n",
    "                pl.col(\n",
    "                    col + \"_2\"\n",
    "                ).sum()\n",
    "\n",
    "            )\n",
    "            \n",
    "            tcb2_final = tcb2_final.join(\n",
    "                temp, on = \"case_id\", how=\"left\"\n",
    "            )\n",
    "            \n",
    "    '''\n",
    "    \n",
    "    CVG_1 = df.select(['case_id', 'num_group1', 'num_group2', 'collater_valueofguarantee_1124L']).filter(\n",
    "        (pl.col('num_group1') == 0) & (pl.col('num_group2') == 0)\n",
    "    ).select(['case_id', 'collater_valueofguarantee_1124L'])\n",
    "\n",
    "    CVG_2 = df.select(['case_id', 'num_group1', 'num_group2', 'collater_valueofguarantee_876L']).filter(\n",
    "        (pl.col('num_group1') == 0) & (pl.col('num_group2') == 0)\n",
    "    ).select(['case_id', 'collater_valueofguarantee_876L'])\n",
    "\n",
    "    feats = df.group_by(\"case_id\").agg(\n",
    "        pl.col(\"pmts_overdue_1140A\").sum(),\n",
    "        pl.col(\"pmts_overdue_1152A\").sum(),\n",
    "        pl.col(\"pmts_dpd_1073P\").sum(),\n",
    "        pl.col(\"pmts_dpd_303P\").sum(),\n",
    "    )\n",
    "\n",
    "    feats_prev = CVG_1.join(\n",
    "        CVG_2, on=\"case_id\", how=\"left\",\n",
    "    ).join(\n",
    "        feats, on=\"case_id\", how=\"left\"\n",
    "    )\n",
    "    \n",
    "    '''\n",
    "    tcb2_final = tcb2_final.join(\n",
    "        feats_prev, on=\"case_id\", how=\"left\"\n",
    "    )\n",
    "    \n",
    "    tcb2_final = tcb2_final.group_by(\n",
    "        \"case_id\"\n",
    "    ).agg(\n",
    "        pl.col(\"collater_typofvalofguarant_298M\").max().cast(pl.UInt16),\n",
    "        pl.col(\"collater_typofvalofguarant_407M\").max().cast(pl.UInt16),\n",
    "        pl.col(\"collaterals_typeofguarante_359M\").max().cast(pl.UInt16),\n",
    "        pl.col(\"collaterals_typeofguarante_669M\").max().cast(pl.UInt16),\n",
    "        pl.col(\"subjectroles_name_541M\").max().cast(pl.UInt16),\n",
    "        pl.col(\"subjectroles_name_838M\").max().cast(pl.UInt16),\n",
    "        pl.col(\"pmts_overdue_1152A\").sum(),\n",
    "        pl.col(\"pmts_overdue_1140A\").sum(),\n",
    "        pl.col(\"pmts_dpd_1073P\").sum(),\n",
    "        pl.col(\"pmts_dpd_303P\").sum(),\n",
    "        pl.col(\"collater_valueofguarantee_1124L\").sum(),\n",
    "        pl.col(\"collater_valueofguarantee_876L\").sum(),\n",
    "    )\n",
    "    '''\n",
    "    \n",
    "    tcb2_final = base[[\"case_id\"]].join(\n",
    "        feats_prev, on=\"case_id\", how=\"left\"\n",
    "    )\n",
    "    \n",
    "    return tcb2_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6a313e87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:03:14.884017Z",
     "iopub.status.busy": "2024-05-28T03:03:14.882995Z",
     "iopub.status.idle": "2024-05-28T03:03:14.889407Z",
     "shell.execute_reply": "2024-05-28T03:03:14.888227Z"
    },
    "papermill": {
     "duration": 0.020499,
     "end_time": "2024-05-28T03:03:14.891619",
     "exception": false,
     "start_time": "2024-05-28T03:03:14.871120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def aggregateOnColumnWithMemory(df1: pl.DataFrame, df2: pl.DataFrame) -> pl.DataFrame:\n",
    "    df = pl.concat(\n",
    "        [df1, df2], how=\"vertical_relaxed\"\n",
    "    )\n",
    "    cols = df.columns\n",
    "    \n",
    "    return df.group_by(\"case_id\").agg(\n",
    "        pl.exclude(\"case_id\").sum()\n",
    "    )\n",
    "            \n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7c724af8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:03:14.911770Z",
     "iopub.status.busy": "2024-05-28T03:03:14.911368Z",
     "iopub.status.idle": "2024-05-28T03:03:15.009987Z",
     "shell.execute_reply": "2024-05-28T03:03:15.008773Z"
    },
    "papermill": {
     "duration": 0.111718,
     "end_time": "2024-05-28T03:03:15.012618",
     "exception": false,
     "start_time": "2024-05-28T03:03:14.900900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7dce74c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:03:15.033766Z",
     "iopub.status.busy": "2024-05-28T03:03:15.033339Z",
     "iopub.status.idle": "2024-05-28T03:04:11.256786Z",
     "shell.execute_reply": "2024-05-28T03:04:11.255449Z"
    },
    "papermill": {
     "duration": 56.245451,
     "end_time": "2024-05-28T03:04:11.268072",
     "exception": false,
     "start_time": "2024-05-28T03:03:15.022621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_c_1 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_2_0.parquet\").pipe(process_tcb_a_2, train_base)\n",
    "train_c_2 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_2_1.parquet\").pipe(process_tcb_a_2, train_base)\n",
    "\n",
    "train_final = aggregateOnColumnWithMemory(train_c_1, train_c_2)\n",
    "\n",
    "train_c_3 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_2_2.parquet\").pipe(process_tcb_a_2, train_base)\n",
    "train_c_4 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_2_3.parquet\").pipe(process_tcb_a_2, train_base)\n",
    "\n",
    "train_final = aggregateOnColumnWithMemory(train_c_3, train_c_4).pipe(aggregateOnColumnWithMemory, train_final)\n",
    "\n",
    "del train_c_1\n",
    "del train_c_2\n",
    "del train_c_3\n",
    "del train_c_4\n",
    "\n",
    "gc.collect()\n",
    "\n",
    "train_c_5 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_2_4.parquet\").pipe(process_tcb_a_2, train_base)\n",
    "train_c_6 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_2_5.parquet\").pipe(process_tcb_a_2, train_base)\n",
    "\n",
    "train_final = aggregateOnColumnWithMemory(train_c_5, train_c_6).pipe(aggregateOnColumnWithMemory, train_final)\n",
    "\n",
    "train_c_7 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_2_6.parquet\").pipe(process_tcb_a_2, train_base)\n",
    "train_c_8 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_2_7.parquet\").pipe(process_tcb_a_2, train_base)\n",
    "\n",
    "train_final = aggregateOnColumnWithMemory(train_c_7, train_c_8).pipe(aggregateOnColumnWithMemory, train_final)\n",
    "\n",
    "del train_c_5\n",
    "del train_c_6\n",
    "del train_c_7\n",
    "del train_c_8\n",
    "\n",
    "gc.collect()\n",
    "\n",
    "train_c_9 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_2_8.parquet\").pipe(process_tcb_a_2, train_base)\n",
    "train_c_10 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_2_9.parquet\").pipe(process_tcb_a_2, train_base)\n",
    "\n",
    "train_final = aggregateOnColumnWithMemory(train_c_9, train_c_10).pipe(aggregateOnColumnWithMemory, train_final)\n",
    "\n",
    "train_c_11 = pl.read_parquet(os.path.join(root, datapath) + \"train_credit_bureau_a_2_10.parquet\").pipe(process_tcb_a_2, train_base)\n",
    "\n",
    "train_final = aggregateOnColumnWithMemory(train_c_11, train_final)\n",
    "\n",
    "\n",
    "del train_c_9\n",
    "del train_c_10\n",
    "del train_c_11\n",
    "\n",
    "gc.collect()\n",
    "\n",
    "train_tcb2 = train_final\n",
    "del train_final\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0846e24d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:04:11.288739Z",
     "iopub.status.busy": "2024-05-28T03:04:11.288335Z",
     "iopub.status.idle": "2024-05-28T03:04:11.312512Z",
     "shell.execute_reply": "2024-05-28T03:04:11.311247Z"
    },
    "papermill": {
     "duration": 0.037683,
     "end_time": "2024-05-28T03:04:11.315109",
     "exception": false,
     "start_time": "2024-05-28T03:04:11.277426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Approval Rate: 3.1437275776712417\n"
     ]
    }
   ],
   "source": [
    "rejected = train_base[[\"target\"]].filter(pl.col(\"target\") == 0).count().item()\n",
    "approved = train_base[[\"target\"]].filter(pl.col(\"target\") == 1).count().item()\n",
    "assert((approved+rejected) >= 0)\n",
    "approval_rate = approved / (approved+rejected)\n",
    "print(\"Approval Rate: {0}\".format(approval_rate*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f27609c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:04:11.336348Z",
     "iopub.status.busy": "2024-05-28T03:04:11.335951Z",
     "iopub.status.idle": "2024-05-28T03:04:11.344309Z",
     "shell.execute_reply": "2024-05-28T03:04:11.342788Z"
    },
    "papermill": {
     "duration": 0.021769,
     "end_time": "2024-05-28T03:04:11.346838",
     "exception": false,
     "start_time": "2024-05-28T03:04:11.325069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def grouping(df: pl.DataFrame, train_base : pl.DataFrame) -> pl.DataFrame:\n",
    "    to_merge = train_base[[\"case_id\"]]\n",
    "    for col in df.columns:\n",
    "        if col[-1] in (\"A\"):\n",
    "            to_merge = to_merge.join(\n",
    "                df.group_by(\"case_id\").agg(pl.col(col).sum()), on=\"case_id\", how=\"left\"\n",
    "            )\n",
    "        elif col[-1] in (\"M\"):\n",
    "            to_merge = to_merge.join(\n",
    "                df.group_by(\"case_id\").agg(pl.col(col).mean()), on=\"case_id\", how=\"left\"\n",
    "            )\n",
    "        elif col[-1] in (\"P\"): \n",
    "            to_merge = to_merge.join(\n",
    "                df.group_by(\"case_id\").agg(pl.col(col).max()), on=\"case_id\", how=\"left\"\n",
    "            )\n",
    "            \n",
    "    return to_merge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7b1d91b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:04:11.368468Z",
     "iopub.status.busy": "2024-05-28T03:04:11.367586Z",
     "iopub.status.idle": "2024-05-28T03:04:12.457188Z",
     "shell.execute_reply": "2024-05-28T03:04:12.455998Z"
    },
    "papermill": {
     "duration": 1.103173,
     "end_time": "2024-05-28T03:04:12.459738",
     "exception": false,
     "start_time": "2024-05-28T03:04:11.356565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from sklearn.metrics import roc_auc_score \n",
    "import lightgbm as GBM\n",
    "from sklearn.model_selection import train_test_split\n",
    "from typing import Tuple\n",
    "\n",
    "\n",
    "def gini_stability(base, w_fallingrate=88.0, w_resstd=-0.5):\n",
    "    gini_in_time = base.loc[:, [\"WEEK_NUM\", \"target\", \"score\"]]\\\n",
    "        .sort_values(\"WEEK_NUM\")\\\n",
    "        .groupby(\"WEEK_NUM\")[[\"target\", \"score\"]]\\\n",
    "        .apply(lambda x: 2*roc_auc_score(x[\"target\"], x[\"score\"])-1).tolist()\n",
    "    \n",
    "    x = np.arange(len(gini_in_time))\n",
    "    y = gini_in_time\n",
    "    a, b = np.polyfit(x, y, 1)\n",
    "    y_hat = a*x + b\n",
    "    residuals = y - y_hat\n",
    "    res_std = np.std(residuals)\n",
    "    avg_gini = np.mean(gini_in_time)\n",
    "    return avg_gini + w_fallingrate * min(0, a) + w_resstd * res_std\n",
    "\n",
    "\n",
    "def WeakTrain(df: pl.DataFrame, base: pl.DataFrame):\n",
    "    treeOne = base.join(\n",
    "        df, on=\"case_id\", how=\"left\"\n",
    "    )\n",
    "    \n",
    "    treeOne = treeOne.to_pandas()\n",
    "    dropList = treeOne.filter([\"case_id\", \"target\", \"date_decision\", \"MONTH\", \"WEEK_NUM\"]) # Filters out non-existent columns\n",
    "    X = treeOne.drop(columns = dropList) # only Existing Columns in the DataFrame are dropped\n",
    "    Y = treeOne[\"target\"]\n",
    "    x_train, x_test, y_train, y_test = train_test_split(X, Y, train_size=0.6, random_state=2)\n",
    "    \n",
    "    lgb_train = GBM.Dataset(x_train, label=y_train)\n",
    "    lgb_valid = GBM.Dataset(x_test, label=y_test, reference=lgb_train)\n",
    "\n",
    "    params = {\n",
    "        \"boosting_type\": \"gbdt\",\n",
    "        \"objective\": \"binary\",\n",
    "        \"metric\": \"auc\",\n",
    "        \"max_depth\": 3,\n",
    "        \"num_leaves\": 31,\n",
    "        \"learning_rate\": 0.05,\n",
    "        \"feature_fraction\": 0.9,\n",
    "        \"bagging_fraction\": 0.8,\n",
    "        \"bagging_freq\": 5,\n",
    "        \"n_estimators\": 1000,\n",
    "        \"verbose\": -1,\n",
    "    }\n",
    "\n",
    "    # gbm = GBM.LGBMClassifier()\n",
    "\n",
    "    # grid = RandomizedSearchCV(gbm, params,verbose=1,cv=10, n_jobs = -1, n_iter=10)\n",
    "    # grid.fit(x_train,y_train, callbacks=[GBM.log_evaluation(50)])\n",
    "\n",
    "\n",
    "    gbm = GBM.train(\n",
    "        params,\n",
    "        lgb_train,\n",
    "        valid_sets=lgb_valid,\n",
    "        callbacks=[GBM.log_evaluation(50), GBM.early_stopping(10)]\n",
    "    )\n",
    "    \n",
    "    giniStability: list = []\n",
    "    for i in range(0, 10):\n",
    "        stabilityDF = treeOne.sample(frac=0.5)\n",
    "        X = stabilityDF.drop(columns = dropList)\n",
    "        y_pred = gbm.predict(X, num_iteration=gbm.best_iteration)\n",
    "        stabilityDF[\"score\"] = y_pred\n",
    "        giniStability.append(gini_stability(stabilityDF))\n",
    "        \n",
    "    print(\"STABILITIES: {0} \\n AVERAGE: {1}\".format(giniStability, np.mean(giniStability)))\n",
    "    \n",
    "    GBM.plot_importance(gbm, max_num_features=10)\n",
    "    return gbm, gbm.feature_name(), gbm.feature_importance()\n",
    "\n",
    "\n",
    "\n",
    "def selectAndReturnDFWithTopK(top_k_train_static: np.array, features: list, k: int, finalDF: pl.DataFrame, df: pl.DataFrame) -> pl.DataFrame:\n",
    "    topKFeatures = np.argsort(top_k_train_static)[::-1][:k]\n",
    "    colNames  = [features[x] for x in topKFeatures]\n",
    "    colNames.append(\"case_id\")\n",
    "    print(colNames)\n",
    "    return finalDF.join(\n",
    "        df[colNames], on=\"case_id\", how=\"left\"\n",
    "    )\n",
    "\n",
    "\n",
    "def PrepareFinalDF(base: pl.DataFrame) -> pl.DataFrame:\n",
    "    return base[[\"case_id\", \"target\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e610cfa9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:04:12.481046Z",
     "iopub.status.busy": "2024-05-28T03:04:12.480470Z",
     "iopub.status.idle": "2024-05-28T03:07:44.301889Z",
     "shell.execute_reply": "2024-05-28T03:07:44.300349Z"
    },
    "papermill": {
     "duration": 211.836259,
     "end_time": "2024-05-28T03:07:44.305613",
     "exception": false,
     "start_time": "2024-05-28T03:04:12.469354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/lightgbm/engine.py:172: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 10 rounds\n",
      "[50]\tvalid_0's auc: 0.728294\n",
      "[100]\tvalid_0's auc: 0.74204\n",
      "[150]\tvalid_0's auc: 0.748575\n",
      "[200]\tvalid_0's auc: 0.752257\n",
      "[250]\tvalid_0's auc: 0.754229\n",
      "[300]\tvalid_0's auc: 0.755716\n",
      "[350]\tvalid_0's auc: 0.756759\n",
      "[400]\tvalid_0's auc: 0.758101\n",
      "[450]\tvalid_0's auc: 0.758728\n",
      "[500]\tvalid_0's auc: 0.75922\n",
      "[550]\tvalid_0's auc: 0.759946\n",
      "[600]\tvalid_0's auc: 0.76046\n",
      "[650]\tvalid_0's auc: 0.760947\n",
      "[700]\tvalid_0's auc: 0.761312\n",
      "Early stopping, best iteration is:\n",
      "[694]\tvalid_0's auc: 0.761333\n",
      "STABILITIES: [0.5181182329334622, 0.5188945622039143, 0.5196235045044818, 0.5215406442525997, 0.5170235114346172, 0.5203723696766585, 0.5141966664003924, 0.5130151544317557, 0.5180553275001595, 0.5169911729212934] \n",
      " AVERAGE: 0.5177831146259335\n",
      "['totalsettled_863A', 'price_1097A', 'annuity_780A', 'currdebt_22A', 'maxdpdtolerance_374P', 'maxannuity_159A', 'credamount_770A', 'avgdpdtolclosure24_3658938P', 'maxdbddpdlast1m_3658939P', 'inittransactionamount_650A', 'case_id']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "113"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "topK: int = 10 # Top-K \n",
    "finalDF = PrepareFinalDF(train_base)\n",
    "\n",
    "#1. Train for train_static\n",
    "model, features, top_k_train = WeakTrain(train_static, train_base)\n",
    "finalDF = selectAndReturnDFWithTopK(top_k_train, features, topK, finalDF, train_static) # Select Top-K and join with finalDF\n",
    "del train_static\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d2106aea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:07:44.332761Z",
     "iopub.status.busy": "2024-05-28T03:07:44.331737Z",
     "iopub.status.idle": "2024-05-28T03:08:16.986873Z",
     "shell.execute_reply": "2024-05-28T03:08:16.985815Z"
    },
    "papermill": {
     "duration": 32.671304,
     "end_time": "2024-05-28T03:08:16.989326",
     "exception": false,
     "start_time": "2024-05-28T03:07:44.318022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/lightgbm/engine.py:172: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 10 rounds\n",
      "[50]\tvalid_0's auc: 0.689386\n",
      "[100]\tvalid_0's auc: 0.69112\n",
      "[150]\tvalid_0's auc: 0.692126\n",
      "Early stopping, best iteration is:\n",
      "[143]\tvalid_0's auc: 0.692142\n",
      "STABILITIES: [0.34111250091958106, 0.33764090152734616, 0.3376451749128375, 0.33241071840234004, 0.33117219243578333, 0.3261790020507473, 0.3453190262840405, 0.3363484717831209, 0.33062179614803405, 0.338844769005746] \n",
      " AVERAGE: 0.3357294553469577\n",
      "['pmts_dpd_303P', 'pmts_dpd_1073P', 'pmts_overdue_1140A', 'collater_valueofguarantee_876L', 'pmts_overdue_1152A', 'collater_valueofguarantee_1124L', 'case_id']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4997"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#2. Train for train_tcb2\n",
    "model, features, top_k_train = WeakTrain(train_tcb2, train_base)\n",
    "finalDF = selectAndReturnDFWithTopK(top_k_train, features, topK, finalDF, train_tcb2) # Select Top-K and join with finalDF\n",
    "del train_tcb2\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c69af30b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:08:17.018140Z",
     "iopub.status.busy": "2024-05-28T03:08:17.017712Z",
     "iopub.status.idle": "2024-05-28T03:10:02.828178Z",
     "shell.execute_reply": "2024-05-28T03:10:02.826964Z"
    },
    "papermill": {
     "duration": 105.828757,
     "end_time": "2024-05-28T03:10:02.831430",
     "exception": false,
     "start_time": "2024-05-28T03:08:17.002673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/lightgbm/engine.py:172: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 10 rounds\n",
      "[50]\tvalid_0's auc: 0.689348\n",
      "[100]\tvalid_0's auc: 0.696798\n",
      "[150]\tvalid_0's auc: 0.700533\n",
      "[200]\tvalid_0's auc: 0.702338\n",
      "[250]\tvalid_0's auc: 0.703398\n",
      "[300]\tvalid_0's auc: 0.70451\n",
      "[350]\tvalid_0's auc: 0.705522\n",
      "Early stopping, best iteration is:\n",
      "[386]\tvalid_0's auc: 0.706035\n",
      "STABILITIES: [0.40026323724499446, 0.40464415089042194, 0.41153167808045393, 0.40320371694548207, 0.4036636122156879, 0.4032878240411308, 0.40369122159357496, 0.3991675935982654, 0.411616845560076, 0.3952680583428457] \n",
      " AVERAGE: 0.4036337938512933\n",
      "['maxdpdtolerance_577P', 'annuity_853A', 'credamount_590A', 'rejectreason_755M', 'outstandingdebt_522A', 'district_544M', 'postype_4733339M', 'education_1138M', 'cancelreason_3545846M', 'rejectreasonclient_4145042M', 'case_id']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "3846"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#3. Train for train_applprev_1 (depth 1, pipe into grouping())\n",
    "train_applprev_1_train = train_applprev_1.pipe(grouping, train_base)\n",
    "model, features, top_k_train = WeakTrain(train_applprev_1_train, train_base)\n",
    "finalDF = selectAndReturnDFWithTopK(top_k_train, features, topK, finalDF, train_applprev_1_train) # Select Top-K and join with finalDF\n",
    "del train_applprev_1\n",
    "del train_applprev_1_train\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "11c8ad05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:10:02.863747Z",
     "iopub.status.busy": "2024-05-28T03:10:02.863312Z",
     "iopub.status.idle": "2024-05-28T03:13:21.185013Z",
     "shell.execute_reply": "2024-05-28T03:13:21.183707Z"
    },
    "papermill": {
     "duration": 198.341234,
     "end_time": "2024-05-28T03:13:21.187775",
     "exception": false,
     "start_time": "2024-05-28T03:10:02.846541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/lightgbm/engine.py:172: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 10 rounds\n",
      "[50]\tvalid_0's auc: 0.732391\n",
      "[100]\tvalid_0's auc: 0.744902\n",
      "[150]\tvalid_0's auc: 0.750963\n",
      "[200]\tvalid_0's auc: 0.753948\n",
      "[250]\tvalid_0's auc: 0.756296\n",
      "[300]\tvalid_0's auc: 0.758333\n",
      "[350]\tvalid_0's auc: 0.760535\n",
      "[400]\tvalid_0's auc: 0.761962\n",
      "[450]\tvalid_0's auc: 0.76316\n",
      "[500]\tvalid_0's auc: 0.76414\n",
      "[550]\tvalid_0's auc: 0.76492\n",
      "[600]\tvalid_0's auc: 0.765771\n",
      "[650]\tvalid_0's auc: 0.766223\n",
      "[700]\tvalid_0's auc: 0.766641\n",
      "Early stopping, best iteration is:\n",
      "[693]\tvalid_0's auc: 0.766671\n",
      "STABILITIES: [0.49935189943610536, 0.4966491134994836, 0.4880852300467659, 0.4931772252015047, 0.4951070649297611, 0.4959975958170879, 0.4936160465384132, 0.492116412493951, 0.5019520096155095, 0.49393792125336344] \n",
      " AVERAGE: 0.4949990518831945\n",
      "['totalamount_996A', 'totalamount_6A', 'outstandingamount_362A', 'dpdmax_757P', 'financialinstitution_591M', 'dpdmax_139P', 'residualamount_856A', 'credlmt_935A', 'monthlyinstlamount_332A', 'financialinstitution_382M', 'case_id']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4962"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#4. Train for train_credit_bureau_1 (depth 1, pipe into grouping())\n",
    "train_credit_bureau = train_credit_bureau.pipe(grouping, train_base)\n",
    "model, features, top_k_train = WeakTrain(train_credit_bureau, train_base)\n",
    "finalDF = selectAndReturnDFWithTopK(top_k_train, features, topK, finalDF, train_credit_bureau)\n",
    "del train_credit_bureau\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4b095667",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:13:21.224480Z",
     "iopub.status.busy": "2024-05-28T03:13:21.224072Z",
     "iopub.status.idle": "2024-05-28T03:14:47.071148Z",
     "shell.execute_reply": "2024-05-28T03:14:47.069899Z"
    },
    "papermill": {
     "duration": 85.869014,
     "end_time": "2024-05-28T03:14:47.074554",
     "exception": false,
     "start_time": "2024-05-28T03:13:21.205540",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/lightgbm/engine.py:172: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 10 rounds\n",
      "[50]\tvalid_0's auc: 0.589955\n",
      "[100]\tvalid_0's auc: 0.59651\n",
      "[150]\tvalid_0's auc: 0.599104\n",
      "[200]\tvalid_0's auc: 0.600791\n",
      "[250]\tvalid_0's auc: 0.60238\n",
      "[300]\tvalid_0's auc: 0.60355\n",
      "[350]\tvalid_0's auc: 0.604082\n",
      "Early stopping, best iteration is:\n",
      "[368]\tvalid_0's auc: 0.604198\n",
      "STABILITIES: [0.08764573137842163, 0.08828338216267209, 0.05936738933994072, 0.05920156179195732, 0.040170714773299795, 0.0457550352589083, 0.08397365857999149, 0.049011651835278974, 0.07638016622508519, 0.05541197758719009] \n",
      " AVERAGE: 0.06452012689327455\n",
      "['mainoccupationinc_384A', 'registaddr_zipcode_184M', 'registaddr_district_1083M', 'empladdr_zipcode_114M', 'contaddr_zipcode_807M', 'empladdr_district_926M', 'contaddr_district_15M', 'education_927M', 'language1_981M', 'case_id']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4704"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#5. Train train_person_1 (depth 1, pipe into grouping())\n",
    "train_person_1_train = train_person_1.pipe(grouping, train_base)\n",
    "model, features, top_k_train = WeakTrain(train_person_1_train, train_base)\n",
    "finalDF = selectAndReturnDFWithTopK(top_k_train, features, topK, finalDF, train_person_1_train) # Select Top-K and join with finalDF\n",
    "del train_person_1_train\n",
    "del train_person_1\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "dca4f9d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:14:47.119719Z",
     "iopub.status.busy": "2024-05-28T03:14:47.119309Z",
     "iopub.status.idle": "2024-05-28T03:15:00.775509Z",
     "shell.execute_reply": "2024-05-28T03:15:00.774506Z"
    },
    "papermill": {
     "duration": 13.679672,
     "end_time": "2024-05-28T03:15:00.778018",
     "exception": false,
     "start_time": "2024-05-28T03:14:47.098346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/lightgbm/engine.py:172: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 10 rounds\n",
      "Early stopping, best iteration is:\n",
      "[35]\tvalid_0's auc: 0.581196\n",
      "STABILITIES: [0.10507232744855946, 0.10088034791985713, 0.09973860967508345, 0.10349823703313461, 0.10264116279530479, 0.10328338282056115, 0.10158776827445742, 0.10230411997548158, 0.09948970792682325, 0.10381775999390312] \n",
      " AVERAGE: 0.10223134238631659\n",
      "['pmtamount_36A', 'amount_4527230A', 'amount_4917619A', 'case_id']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4378"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#6. Train train_tax (depth 1, no need for grouping, pass to weakTrain)\n",
    "model, features, top_k_train = WeakTrain(train_tax, train_base)\n",
    "finalDF = selectAndReturnDFWithTopK(top_k_train, features, topK, finalDF, train_tax) # Select Top-K and join with finalDF\n",
    "del train_tax\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cd7e683a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:15:00.819894Z",
     "iopub.status.busy": "2024-05-28T03:15:00.819508Z",
     "iopub.status.idle": "2024-05-28T03:19:58.984690Z",
     "shell.execute_reply": "2024-05-28T03:19:58.983342Z"
    },
    "papermill": {
     "duration": 298.189193,
     "end_time": "2024-05-28T03:19:58.987609",
     "exception": false,
     "start_time": "2024-05-28T03:15:00.798416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/lightgbm/engine.py:172: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 10 rounds\n",
      "[50]\tvalid_0's auc: 0.771306\n",
      "[100]\tvalid_0's auc: 0.786784\n",
      "[150]\tvalid_0's auc: 0.793593\n",
      "[200]\tvalid_0's auc: 0.798015\n",
      "[250]\tvalid_0's auc: 0.801065\n",
      "[300]\tvalid_0's auc: 0.803301\n",
      "[350]\tvalid_0's auc: 0.805014\n",
      "[400]\tvalid_0's auc: 0.806686\n",
      "[450]\tvalid_0's auc: 0.808281\n",
      "[500]\tvalid_0's auc: 0.809304\n",
      "[550]\tvalid_0's auc: 0.810562\n",
      "[600]\tvalid_0's auc: 0.811656\n",
      "[650]\tvalid_0's auc: 0.812424\n",
      "[700]\tvalid_0's auc: 0.813\n",
      "[750]\tvalid_0's auc: 0.813672\n",
      "[800]\tvalid_0's auc: 0.814484\n",
      "[850]\tvalid_0's auc: 0.814991\n",
      "[900]\tvalid_0's auc: 0.815463\n",
      "[950]\tvalid_0's auc: 0.815901\n",
      "[1000]\tvalid_0's auc: 0.816259\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[1000]\tvalid_0's auc: 0.816259\n",
      "STABILITIES: [0.6197690163043632, 0.6243371408998432, 0.6276873321232156, 0.6278909999352769, 0.6207561794578973, 0.6301582398428374, 0.6205230798913254, 0.6216631043152399, 0.6233536465101457, 0.6270591817306074] \n",
      " AVERAGE: 0.6243197921010752\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "finalDF = finalDF.drop([\"target\"])\n",
    "final_model, features, top_k_train =  WeakTrain(finalDF, train_base[[\"case_id\", \"WEEK_NUM\", \"target\"]]) # Strong Learner."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9f51df7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:19:59.034407Z",
     "iopub.status.busy": "2024-05-28T03:19:59.034031Z",
     "iopub.status.idle": "2024-05-28T03:19:59.039104Z",
     "shell.execute_reply": "2024-05-28T03:19:59.038003Z"
    },
    "papermill": {
     "duration": 0.030705,
     "end_time": "2024-05-28T03:19:59.041379",
     "exception": false,
     "start_time": "2024-05-28T03:19:59.010674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "selected_static_cols = features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e7e30960",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:19:59.086960Z",
     "iopub.status.busy": "2024-05-28T03:19:59.086555Z",
     "iopub.status.idle": "2024-05-28T03:19:59.091318Z",
     "shell.execute_reply": "2024-05-28T03:19:59.090205Z"
    },
    "papermill": {
     "duration": 0.030373,
     "end_time": "2024-05-28T03:19:59.093597",
     "exception": false,
     "start_time": "2024-05-28T03:19:59.063224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# FINAL_MODEL_NAME\n",
    "\n",
    "## final_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc0b3fe5",
   "metadata": {
    "papermill": {
     "duration": 0.02345,
     "end_time": "2024-05-28T03:19:59.139235",
     "exception": false,
     "start_time": "2024-05-28T03:19:59.115785",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ***LOAD TESTING DATA*** # "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f670bdd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:19:59.184872Z",
     "iopub.status.busy": "2024-05-28T03:19:59.184482Z",
     "iopub.status.idle": "2024-05-28T03:19:59.350247Z",
     "shell.execute_reply": "2024-05-28T03:19:59.349073Z"
    },
    "papermill": {
     "duration": 0.191789,
     "end_time": "2024-05-28T03:19:59.353037",
     "exception": false,
     "start_time": "2024-05-28T03:19:59.161248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "TestDatapath :str = os.path.join(root, \"parquet_files/test/\")\n",
    "test_base = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_base.parquet\").pipe(set_table_dtypes)\n",
    "\n",
    "# Depth 1\n",
    "test_person_1 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_person_1.parquet\").pipe(set_table_dtypes).pipe(filterAMP).pipe(categoricalEncoding) \n",
    "# Depth 2\n",
    "test_person_2 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_person_2.parquet\").pipe(set_table_dtypes).pipe(filterAMP).pipe(categoricalEncoding)\n",
    "\n",
    "# Depth 1\n",
    "test_applprev_1 = pl.concat(\n",
    "        [\n",
    "           pl.read_parquet(os.path.join(root, TestDatapath) + \"test_applprev_1_0.parquet\").pipe(set_table_dtypes).pipe(filterAMP),\n",
    "           pl.read_parquet(os.path.join(root, TestDatapath) + \"test_applprev_1_1.parquet\").pipe(set_table_dtypes).pipe(filterAMP),\n",
    "           pl.read_parquet(os.path.join(root, TestDatapath) + \"test_applprev_1_2.parquet\").pipe(set_table_dtypes).pipe(filterAMP) \n",
    "        ],\n",
    "        how = \"vertical_relaxed\"\n",
    ").pipe(categoricalEncoding)\n",
    "\n",
    "# Depth 0\n",
    "test_static = pl.concat( \n",
    "        [\n",
    "            pl.read_parquet(os.path.join(root, TestDatapath) + \"test_static_0_0.parquet\").pipe(set_table_dtypes),\n",
    "            pl.read_parquet(os.path.join(root, TestDatapath) + \"test_static_0_1.parquet\").pipe(set_table_dtypes),\n",
    "            pl.read_parquet(os.path.join(root, TestDatapath) + \"test_static_0_2.parquet\").pipe(set_table_dtypes)\n",
    "        ],\n",
    "        how=\"vertical_relaxed\",\n",
    ").pipe(filterAMP).pipe(categoricalEncoding)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "477ef3f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:19:59.400589Z",
     "iopub.status.busy": "2024-05-28T03:19:59.400189Z",
     "iopub.status.idle": "2024-05-28T03:19:59.481347Z",
     "shell.execute_reply": "2024-05-28T03:19:59.480112Z"
    },
    "papermill": {
     "duration": 0.108401,
     "end_time": "2024-05-28T03:19:59.484200",
     "exception": false,
     "start_time": "2024-05-28T03:19:59.375799",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Preprocessing\n",
    "\n",
    "#1. test_static\n",
    "#2. Test for test_applprev_1 (depth 1, pipe into grouping())\n",
    "test_applprev_1_test = test_applprev_1.pipe(grouping, test_base)\n",
    "#3. Train train_person_1 (depth 1, pipe into grouping())\n",
    "test_person_1_test = test_person_1.pipe(grouping, test_base)\n",
    "\n",
    "#4. train_tax_registries, Depth 1, sum on A \n",
    "\n",
    "test_tax_registry_a = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_tax_registry_a_1.parquet\").pipe(set_table_dtypes)\n",
    "test_tax_registry_b = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_tax_registry_b_1.parquet\").pipe(set_table_dtypes)\n",
    "test_tax_registry_c = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_tax_registry_c_1.parquet\").pipe(set_table_dtypes)\n",
    "test_base = test_base.to_pandas()\n",
    "\n",
    "test_tax = test_base[[\"case_id\"]].merge(\n",
    "    test_tax_registry_a.group_by(\"case_id\").agg(pl.col(\"amount_4527230A\").sum()).to_pandas(), on=\"case_id\", how=\"left\"\n",
    ").merge(\n",
    "    test_tax_registry_b.group_by(\"case_id\").agg(pl.col(\"amount_4917619A\").sum()).to_pandas(), on=\"case_id\", how=\"left\"\n",
    ").merge(\n",
    "    test_tax_registry_c.group_by(\"case_id\").agg(pl.col(\"pmtamount_36A\").sum()).to_pandas(), on=\"case_id\", how=\"left\",\n",
    ")\n",
    "\n",
    "test_tax = pl.from_pandas(test_tax)\n",
    "test_base = pl.from_pandas(test_base)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4ba526db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:19:59.529672Z",
     "iopub.status.busy": "2024-05-28T03:19:59.529264Z",
     "iopub.status.idle": "2024-05-28T03:19:59.785296Z",
     "shell.execute_reply": "2024-05-28T03:19:59.784009Z"
    },
    "papermill": {
     "duration": 0.282154,
     "end_time": "2024-05-28T03:19:59.788167",
     "exception": false,
     "start_time": "2024-05-28T03:19:59.506013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#5.  train_credit_bureau_a_1\n",
    "test_c_1 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_1_0.parquet\").pipe(set_table_dtypes).pipe(filterAMP).pipe(categoricalEncoding).pipe(set_table_dtypes)\n",
    "test_c_2 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_1_1.parquet\").pipe(set_table_dtypes).pipe(filterAMP).pipe(categoricalEncoding).pipe(set_table_dtypes)\n",
    "test_c_3 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_1_2.parquet\").pipe(set_table_dtypes).pipe(filterAMP).pipe(categoricalEncoding).pipe(set_table_dtypes)\n",
    "test_c_4 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_1_3.parquet\").pipe(set_table_dtypes).pipe(filterAMP).pipe(categoricalEncoding).pipe(set_table_dtypes)\n",
    "\n",
    "\n",
    "test_credit_bureau = pl.concat(\n",
    "    [\n",
    "        test_c_1, test_c_2, test_c_3, test_c_4\n",
    "    ],\n",
    "    how=\"vertical_relaxed\"\n",
    ").pipe(set_table_dtypes)\n",
    "\n",
    "del test_c_1\n",
    "del test_c_2\n",
    "del test_c_3\n",
    "del test_c_4\n",
    "\n",
    "gc.collect()\n",
    "\n",
    "test_credit_bureau = test_credit_bureau.pipe(grouping, test_base)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b90ab9aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:19:59.835121Z",
     "iopub.status.busy": "2024-05-28T03:19:59.834641Z",
     "iopub.status.idle": "2024-05-28T03:20:00.384712Z",
     "shell.execute_reply": "2024-05-28T03:20:00.383374Z"
    },
    "papermill": {
     "duration": 0.576893,
     "end_time": "2024-05-28T03:20:00.387367",
     "exception": false,
     "start_time": "2024-05-28T03:19:59.810474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_c_1 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_2_0.parquet\").pipe(process_tcb_a_2, test_base)\n",
    "test_c_2 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_2_1.parquet\").pipe(process_tcb_a_2, test_base)\n",
    "\n",
    "test_final = aggregateOnColumnWithMemory(test_c_1, test_c_2)\n",
    "\n",
    "test_c_3 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_2_2.parquet\").pipe(process_tcb_a_2, test_base)\n",
    "test_c_4 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_2_3.parquet\").pipe(process_tcb_a_2, test_base)\n",
    "\n",
    "test_final = aggregateOnColumnWithMemory(test_c_3, test_c_4).pipe(aggregateOnColumnWithMemory, test_final)\n",
    "\n",
    "del test_c_1\n",
    "del test_c_2\n",
    "del test_c_3\n",
    "del test_c_4\n",
    "\n",
    "gc.collect()\n",
    "\n",
    "test_c_5 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_2_4.parquet\").pipe(process_tcb_a_2, test_base)\n",
    "test_c_6 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_2_5.parquet\").pipe(process_tcb_a_2, test_base)\n",
    "\n",
    "test_final = aggregateOnColumnWithMemory(test_c_5, test_c_6).pipe(aggregateOnColumnWithMemory, test_final)\n",
    "\n",
    "test_c_7 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_2_6.parquet\").pipe(process_tcb_a_2, test_base)\n",
    "test_c_8 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_2_7.parquet\").pipe(process_tcb_a_2, test_base)\n",
    "\n",
    "test_final = aggregateOnColumnWithMemory(test_c_7, test_c_8).pipe(aggregateOnColumnWithMemory, test_final)\n",
    "\n",
    "del test_c_5\n",
    "del test_c_6\n",
    "del test_c_7\n",
    "del test_c_8\n",
    "\n",
    "gc.collect()\n",
    "\n",
    "test_c_9 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_2_8.parquet\").pipe(process_tcb_a_2, test_base)\n",
    "test_c_10 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_2_9.parquet\").pipe(process_tcb_a_2, test_base)\n",
    "\n",
    "test_final = aggregateOnColumnWithMemory(test_c_9, test_c_10).pipe(aggregateOnColumnWithMemory, test_final)\n",
    "\n",
    "test_c_11 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_2_10.parquet\").pipe(process_tcb_a_2, test_base)\n",
    "test_c_12 = pl.read_parquet(os.path.join(root, TestDatapath) + \"test_credit_bureau_a_2_11.parquet\").pipe(process_tcb_a_2, test_base)\n",
    "\n",
    "test_final = aggregateOnColumnWithMemory(test_c_11, test_c_12).pipe(aggregateOnColumnWithMemory, test_final)\n",
    "\n",
    "\n",
    "del test_c_9\n",
    "del test_c_10\n",
    "del test_c_11\n",
    "del test_c_12\n",
    "\n",
    "gc.collect()\n",
    "\n",
    "test_tcb2 = test_final\n",
    "\n",
    "del test_final\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "805b1e69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:20:00.433886Z",
     "iopub.status.busy": "2024-05-28T03:20:00.432861Z",
     "iopub.status.idle": "2024-05-28T03:20:00.446987Z",
     "shell.execute_reply": "2024-05-28T03:20:00.445794Z"
    },
    "papermill": {
     "duration": 0.040014,
     "end_time": "2024-05-28T03:20:00.449363",
     "exception": false,
     "start_time": "2024-05-28T03:20:00.409349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (10, 7)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>case_id</th><th>collater_valueofguarantee_1124L</th><th>collater_valueofguarantee_876L</th><th>pmts_overdue_1140A</th><th>pmts_overdue_1152A</th><th>pmts_dpd_1073P</th><th>pmts_dpd_303P</th></tr><tr><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>57551</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td></tr><tr><td>57634</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td></tr><tr><td>57552</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td></tr><tr><td>57630</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td></tr><tr><td>57633</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td></tr><tr><td>57569</td><td>0.0</td><td>0.0</td><td>0.0</td><td>233424.814</td><td>0.0</td><td>16300.0</td></tr><tr><td>57543</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td></tr><tr><td>57632</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td></tr><tr><td>57549</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td></tr><tr><td>57631</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (10, 7)\n",
       "┌─────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬─────────────┐\n",
       "│ case_id ┆ collater_val ┆ collater_val ┆ pmts_overdue ┆ pmts_overdue ┆ pmts_dpd_107 ┆ pmts_dpd_30 │\n",
       "│ ---     ┆ ueofguarante ┆ ueofguarante ┆ _1140A       ┆ _1152A       ┆ 3P           ┆ 3P          │\n",
       "│ i64     ┆ e_1124L      ┆ e_876L       ┆ ---          ┆ ---          ┆ ---          ┆ ---         │\n",
       "│         ┆ ---          ┆ ---          ┆ f64          ┆ f64          ┆ f64          ┆ f64         │\n",
       "│         ┆ f64          ┆ f64          ┆              ┆              ┆              ┆             │\n",
       "╞═════════╪══════════════╪══════════════╪══════════════╪══════════════╪══════════════╪═════════════╡\n",
       "│ 57551   ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0         │\n",
       "│ 57634   ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0         │\n",
       "│ 57552   ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0         │\n",
       "│ 57630   ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0         │\n",
       "│ 57633   ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0         │\n",
       "│ 57569   ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 233424.814   ┆ 0.0          ┆ 16300.0     │\n",
       "│ 57543   ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0         │\n",
       "│ 57632   ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0         │\n",
       "│ 57549   ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0         │\n",
       "│ 57631   ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0          ┆ 0.0         │\n",
       "└─────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴─────────────┘"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_tcb2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "253c2ee6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:20:00.497220Z",
     "iopub.status.busy": "2024-05-28T03:20:00.496784Z",
     "iopub.status.idle": "2024-05-28T03:20:00.506060Z",
     "shell.execute_reply": "2024-05-28T03:20:00.504750Z"
    },
    "papermill": {
     "duration": 0.035447,
     "end_time": "2024-05-28T03:20:00.508610",
     "exception": false,
     "start_time": "2024-05-28T03:20:00.473163",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_static_cols = list(set(selected_static_cols).intersection(set(test_static.columns)))\n",
    "test_applprev_1_cols = list(set(selected_static_cols).intersection(set(test_applprev_1_test.columns)))\n",
    "test_person_1_cols = list(set(selected_static_cols).intersection(set(test_person_1_test.columns)))\n",
    "test_tax_cols = list(set(selected_static_cols).intersection(set(test_tax.columns)))\n",
    "test_credit_bureau_cols = list(set(selected_static_cols).intersection(set(test_credit_bureau.columns)))\n",
    "test_tcb2_cols = list(set(selected_static_cols).intersection(set(test_tcb2.columns)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "625a54fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:20:00.555465Z",
     "iopub.status.busy": "2024-05-28T03:20:00.555084Z",
     "iopub.status.idle": "2024-05-28T03:20:00.566007Z",
     "shell.execute_reply": "2024-05-28T03:20:00.564975Z"
    },
    "papermill": {
     "duration": 0.037386,
     "end_time": "2024-05-28T03:20:00.568585",
     "exception": false,
     "start_time": "2024-05-28T03:20:00.531199",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_submission = test_base.join(\n",
    "    test_static.select([\"case_id\"]+test_static_cols), how=\"left\", on=\"case_id\"\n",
    ").join(\n",
    "    test_applprev_1_test.select([\"case_id\"]+test_applprev_1_cols), how=\"left\", on=\"case_id\"\n",
    ").join(\n",
    "    test_person_1_test.select([\"case_id\"]+test_person_1_cols), how=\"left\", on=\"case_id\"\n",
    ").join(\n",
    "    test_tax.select([\"case_id\"]+test_tax_cols), on=\"case_id\", how=\"left\",\n",
    ").join(\n",
    "    test_credit_bureau.select([\"case_id\"]+test_credit_bureau_cols), on=\"case_id\", how=\"left\",\n",
    ").join(\n",
    "    test_tcb2.select([\"case_id\"]+test_tcb2_cols), on=\"case_id\", how=\"left\",\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a2cb3075",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:20:00.615993Z",
     "iopub.status.busy": "2024-05-28T03:20:00.614856Z",
     "iopub.status.idle": "2024-05-28T03:20:00.655036Z",
     "shell.execute_reply": "2024-05-28T03:20:00.653585Z"
    },
    "papermill": {
     "duration": 0.066751,
     "end_time": "2024-05-28T03:20:00.657657",
     "exception": false,
     "start_time": "2024-05-28T03:20:00.590906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>totalsettled_863A</th>\n",
       "      <th>price_1097A</th>\n",
       "      <th>annuity_780A</th>\n",
       "      <th>currdebt_22A</th>\n",
       "      <th>maxdpdtolerance_374P</th>\n",
       "      <th>maxannuity_159A</th>\n",
       "      <th>credamount_770A</th>\n",
       "      <th>avgdpdtolclosure24_3658938P</th>\n",
       "      <th>maxdbddpdlast1m_3658939P</th>\n",
       "      <th>inittransactionamount_650A</th>\n",
       "      <th>...</th>\n",
       "      <th>registaddr_district_1083M</th>\n",
       "      <th>empladdr_zipcode_114M</th>\n",
       "      <th>contaddr_zipcode_807M</th>\n",
       "      <th>empladdr_district_926M</th>\n",
       "      <th>contaddr_district_15M</th>\n",
       "      <th>education_927M</th>\n",
       "      <th>language1_981M</th>\n",
       "      <th>pmtamount_36A</th>\n",
       "      <th>amount_4527230A</th>\n",
       "      <th>amount_4917619A</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>456031.093750</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3674.600098</td>\n",
       "      <td>12154.400391</td>\n",
       "      <td>7.0</td>\n",
       "      <td>280983.562500</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>151771.406250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>373720.843750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5742.600098</td>\n",
       "      <td>10638.200195</td>\n",
       "      <td>54.0</td>\n",
       "      <td>337659.812500</td>\n",
       "      <td>75000.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>75219.000000</td>\n",
       "      <td>27095.201172</td>\n",
       "      <td>2844.600098</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>83400.000000</td>\n",
       "      <td>27095.201172</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35181.601562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>284213.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6298.800293</td>\n",
       "      <td>191269.609375</td>\n",
       "      <td>0.0</td>\n",
       "      <td>110500.000000</td>\n",
       "      <td>100000.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>95348.421875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4682.600098</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2865.0</td>\n",
       "      <td>37704.000000</td>\n",
       "      <td>60000.000000</td>\n",
       "      <td>2517.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9677.600586</td>\n",
       "      <td>96174.000000</td>\n",
       "      <td>8905.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1382.800049</td>\n",
       "      <td>96174.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>24920.000000</td>\n",
       "      <td>2540.600098</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>24920.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>63652.000000</td>\n",
       "      <td>25998.000000</td>\n",
       "      <td>4732.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7000.000000</td>\n",
       "      <td>25998.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8273.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>39950.800781</td>\n",
       "      <td>13998.000000</td>\n",
       "      <td>1165.800049</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>12108.200195</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   totalsettled_863A   price_1097A  annuity_780A   currdebt_22A  \\\n",
       "0      456031.093750      0.000000   3674.600098   12154.400391   \n",
       "1      373720.843750           NaN   5742.600098   10638.200195   \n",
       "2       75219.000000  27095.201172   2844.600098       0.000000   \n",
       "3      284213.000000           NaN   6298.800293  191269.609375   \n",
       "4       95348.421875           NaN   4682.600098       0.000000   \n",
       "5        9677.600586  96174.000000   8905.000000       0.000000   \n",
       "6           0.000000  24920.000000   2540.600098       0.000000   \n",
       "7       63652.000000  25998.000000   4732.000000       0.000000   \n",
       "8           0.000000      0.000000   8273.000000       0.000000   \n",
       "9       39950.800781  13998.000000   1165.800049       0.000000   \n",
       "\n",
       "   maxdpdtolerance_374P  maxannuity_159A  credamount_770A  \\\n",
       "0                   7.0    280983.562500     20000.000000   \n",
       "1                  54.0    337659.812500     75000.000000   \n",
       "2                   4.0     83400.000000     27095.201172   \n",
       "3                   0.0    110500.000000    100000.000000   \n",
       "4                2865.0     37704.000000     60000.000000   \n",
       "5                   2.0      1382.800049     96174.000000   \n",
       "6                   0.0         0.000000     24920.000000   \n",
       "7                   0.0      7000.000000     25998.000000   \n",
       "8                   0.0         0.000000    200000.000000   \n",
       "9                   0.0      5000.000000     12108.200195   \n",
       "\n",
       "   avgdpdtolclosure24_3658938P  maxdbddpdlast1m_3658939P  \\\n",
       "0                          1.0                       2.0   \n",
       "1                          0.0                       0.0   \n",
       "2                          1.0                       NaN   \n",
       "3                          0.0                      -1.0   \n",
       "4                       2517.0                       NaN   \n",
       "5                          0.0                       NaN   \n",
       "6                          NaN                       NaN   \n",
       "7                          0.0                      -4.0   \n",
       "8                          NaN                       NaN   \n",
       "9                          0.0                       NaN   \n",
       "\n",
       "   inittransactionamount_650A  ...  registaddr_district_1083M  \\\n",
       "0                         NaN  ...                        0.0   \n",
       "1                         NaN  ...                        2.0   \n",
       "2                         NaN  ...                        1.0   \n",
       "3                         NaN  ...                        3.0   \n",
       "4                         NaN  ...                        2.0   \n",
       "5                         NaN  ...                        4.0   \n",
       "6                         NaN  ...                        NaN   \n",
       "7                         NaN  ...                        NaN   \n",
       "8                         NaN  ...                        NaN   \n",
       "9                         NaN  ...                        NaN   \n",
       "\n",
       "   empladdr_zipcode_114M  contaddr_zipcode_807M  empladdr_district_926M  \\\n",
       "0                    NaN                    1.0                     NaN   \n",
       "1                    NaN                    NaN                     NaN   \n",
       "2                    NaN                    3.0                     NaN   \n",
       "3                    NaN                    1.0                     NaN   \n",
       "4                    NaN                    2.0                     NaN   \n",
       "5                    NaN                    0.0                     NaN   \n",
       "6                    NaN                    NaN                     NaN   \n",
       "7                    NaN                    NaN                     NaN   \n",
       "8                    NaN                    NaN                     NaN   \n",
       "9                    NaN                    NaN                     NaN   \n",
       "\n",
       "   contaddr_district_15M  education_927M  language1_981M  pmtamount_36A  \\\n",
       "0                    0.0             1.0             NaN            NaN   \n",
       "1                    NaN             0.0             NaN            NaN   \n",
       "2                    1.0             NaN             0.0            NaN   \n",
       "3                    3.0             NaN             0.0            NaN   \n",
       "4                    2.0             1.0             NaN            NaN   \n",
       "5                    4.0             0.0             NaN            NaN   \n",
       "6                    NaN             NaN             NaN            NaN   \n",
       "7                    NaN             NaN             NaN            NaN   \n",
       "8                    NaN             NaN             NaN            NaN   \n",
       "9                    NaN             NaN             NaN            NaN   \n",
       "\n",
       "   amount_4527230A  amount_4917619A  \n",
       "0              NaN    151771.406250  \n",
       "1              NaN              NaN  \n",
       "2              NaN     35181.601562  \n",
       "3              NaN              NaN  \n",
       "4              NaN              NaN  \n",
       "5              NaN              NaN  \n",
       "6              NaN              NaN  \n",
       "7              NaN              NaN  \n",
       "8              NaN              NaN  \n",
       "9              NaN              NaN  \n",
       "\n",
       "[10 rows x 48 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_submission[selected_static_cols].to_pandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1c3625fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:20:00.706443Z",
     "iopub.status.busy": "2024-05-28T03:20:00.706024Z",
     "iopub.status.idle": "2024-05-28T03:20:00.723113Z",
     "shell.execute_reply": "2024-05-28T03:20:00.721686Z"
    },
    "papermill": {
     "duration": 0.044831,
     "end_time": "2024-05-28T03:20:00.725890",
     "exception": false,
     "start_time": "2024-05-28T03:20:00.681059",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_submission = data_submission[selected_static_cols].to_pandas()\n",
    "y_submission_pred = final_model.predict(X_submission, num_iteration=final_model.best_iteration)\n",
    "\n",
    "submission = pd.DataFrame({\n",
    "    \"case_id\": data_submission[\"case_id\"].to_numpy(),\n",
    "    \"score\": y_submission_pred\n",
    "}).set_index('case_id')\n",
    "submission.to_csv(\"./submission.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "639f6042",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:20:00.774390Z",
     "iopub.status.busy": "2024-05-28T03:20:00.774003Z",
     "iopub.status.idle": "2024-05-28T03:20:00.784562Z",
     "shell.execute_reply": "2024-05-28T03:20:00.783479Z"
    },
    "papermill": {
     "duration": 0.037693,
     "end_time": "2024-05-28T03:20:00.787016",
     "exception": false,
     "start_time": "2024-05-28T03:20:00.749323",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>case_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>57543</th>\n",
       "      <td>0.019517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57549</th>\n",
       "      <td>0.038307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57551</th>\n",
       "      <td>0.032060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57552</th>\n",
       "      <td>0.061578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57569</th>\n",
       "      <td>0.096617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57630</th>\n",
       "      <td>0.021696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57631</th>\n",
       "      <td>0.031583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57632</th>\n",
       "      <td>0.014507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57633</th>\n",
       "      <td>0.089607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57634</th>\n",
       "      <td>0.026387</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            score\n",
       "case_id          \n",
       "57543    0.019517\n",
       "57549    0.038307\n",
       "57551    0.032060\n",
       "57552    0.061578\n",
       "57569    0.096617\n",
       "57630    0.021696\n",
       "57631    0.031583\n",
       "57632    0.014507\n",
       "57633    0.089607\n",
       "57634    0.026387"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d9c969da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-28T03:20:00.835285Z",
     "iopub.status.busy": "2024-05-28T03:20:00.834819Z",
     "iopub.status.idle": "2024-05-28T03:20:00.850331Z",
     "shell.execute_reply": "2024-05-28T03:20:00.849010Z"
    },
    "papermill": {
     "duration": 0.042589,
     "end_time": "2024-05-28T03:20:00.852725",
     "exception": false,
     "start_time": "2024-05-28T03:20:00.810136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelBinarizer\n",
    "\n",
    "### Interested in the features below in train_person_1\n",
    "'''\n",
    "childnum_185L --- Number of children of the applicant - Ordinal, unspecified\n",
    "education_927M --- Education level of the person. - Categorical\n",
    "empl_employedtotal_800L --- Employment length of a person. - Categorical, Unspecified\n",
    "familystate_447L --- Family state of the person. (Married, Divorced….), Categorical, Unspecified\n",
    "incometype_1044T --- Type of income of the person (Government, Private…), categorical\n",
    "mainoccupationinc_384A --- Amount of the main income of the client. (Most Important), numerical -> Deal with this at the end\n",
    "# maritalst_703L --- Marital status of the client, categorical (same as familystate, so don't need this?? )\n",
    "safeguarantyflag_411L --- Flag indicating if client is using a flexible product with additional safeguard guaranty.\n",
    "'''\n",
    "### Plan : Transformations using polars -> convert to pandas, or convert polars DF to_numpy() -> Preprocessing, \n",
    "\n",
    "### 1. Numerical/categorical/object?? \n",
    "### 2. Handle NA \n",
    "### 3. Transform into something else???? \n",
    "\n",
    "class transformations:\n",
    "    def __init__(self, df: pl.DataFrame, base_table: pl.DataFrame):\n",
    "        self.df = df\n",
    "        self.baseTable = base_table\n",
    "        \n",
    "    def joinFeatures(self, *args):\n",
    "        for index, data in enumerate(args[1:]):\n",
    "            data[index] = data[index-1].join(\n",
    "                data[index], how=\"left\", on=\"case_id\"\n",
    "            )\n",
    "        return data\n",
    "    \n",
    "    def train_person_1_transform(self):\n",
    "        cn185L = self.df.group_by('case_id').agg(pl.col('childnum_185L').max().alias('cn185L'))\n",
    "        ed927M = self.df.group_by('case_id').agg(pl.col(\"education_927M\").count().alias(\"ed927M\"))\n",
    "        # em800L = self.df.group_by('case_id').agg(pl.col(\"empl_employedtotal_800L\").max().alias(\"em800L\"))\n",
    "        # fs447L = self.df.filter(pl.col(\"num_group1\") == 0).select(pl.col(\"case_id\"), \n",
    "        #                                                 pl.col(\"familystate_447L\"))\n",
    "        sgf_411L = self.df.filter(pl.col(\"num_group1\") == 0).select(pl.col(\"case_id\"), pl.col(\"safeguarantyflag_411L\").cast(pl.Int32))\n",
    "        mo_384A  = self.df.group_by(\"case_id\").agg(pl.col(\"mainoccupationinc_384A\").sum())\n",
    "        # it_1044T = self.df.filter(pl.col(\"num_group1\") == 0).select(pl.col(\"case_id\"), \n",
    "        #                                                 pl.col(\"incometype_1044T\"))\n",
    "        em800L = self.df.select(pl.col(\"case_id\"), pl.col(\"empl_employedtotal_800L\")).fill_null(\"null\") \n",
    "        # Step 2: Map null to 0 (No employment history), LESS_ONE to 1 (Less than One Year), MORE_ONE = 2.0 (More than one Year), Else 5.0\n",
    "        em800L = em800L.select(pl.col(\"case_id\"), pl.col(\"empl_employedtotal_800L\").map_elements(\n",
    "                                    lambda x: 0.0 if x==\"null\" else 1.0 if x==\"LESS_ONE\" else 2.0 if x == \"MORE_ONE\" else 5.0, \n",
    "                                    return_dtype = pl.Float32)\n",
    "                          )\n",
    "        # Step 3: Group by the case_id and aggregate on empl_800L, count the number of entries for each case ID\n",
    "        #         Since there are 4 distinct values for empl_800L, find the sum and div / 4.0 . (we don't find the mean because count is diff)\n",
    "        #         To penalize case_id's with more entries we mutliply the value calculated above by 1/(count of entries).\n",
    "        #         Logic: The more entries for case_id, the more our div/4.0 will be penalized. If all people involved in a case_id\n",
    "        #         have some form of experience this penalty is minimal. If Just one person has experience and there's 5 people involved\n",
    "        #         in the case_id, penalty is high. This could mean that the primary borrower is the only person employed.\n",
    "        em800L = em800L.group_by(\"case_id\").agg(pl.col(\"empl_employedtotal_800L\").count().alias(\"count\"), \n",
    "                             pl.col(\"empl_employedtotal_800L\").sum() / 4.0, \n",
    "                            ).sort(by=\"case_id\").with_columns(((1.0/pl.col(\"count\")) * pl.col(\"empl_employedtotal_800L\")).\n",
    "                                                                       alias(\"Significance\")).select(pl.col(\"case_id\", \"Significance\"))\n",
    "        return self.baseTable.join(\n",
    "                cn185L, on=\"case_id\", how=\"left\"\n",
    "            ).join(\n",
    "                ed927M, on=\"case_id\", how=\"left\"\n",
    "            ).join(\n",
    "                sgf_411L, on=\"case_id\", how=\"left\"\n",
    "            ).join(\n",
    "                mo_384A, on=\"case_id\", how=\"left\"\n",
    "            ).join(\n",
    "                em800L, on=\"case_id\", how=\"left\"\n",
    "            )\n",
    "\n",
    "\n",
    "     \n",
    "               \n",
    "# transformation = transformations(train_person_second, train_base)\n",
    "# train_features = transformation.train_person_1_transform()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96a164f4",
   "metadata": {
    "papermill": {
     "duration": 0.022541,
     "end_time": "2024-05-28T03:20:00.898233",
     "exception": false,
     "start_time": "2024-05-28T03:20:00.875692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 7921029,
     "sourceId": 50160,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1215.994519,
   "end_time": "2024-05-28T03:20:01.848600",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-28T02:59:45.854081",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
